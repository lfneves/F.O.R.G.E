name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Get version from tag
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "CLEAN_VERSION=${VERSION#v}" >> $GITHUB_OUTPUT
        
    - name: Update version in build.gradle.kts
      run: |
        sed -i 's/version = ".*"/version = "${{ steps.version.outputs.CLEAN_VERSION }}"/' build.gradle.kts
        
    - name: Build and Test
      run: |
        ./gradlew clean
        ./gradlew test
        ./gradlew build
        
    - name: Build Release JARs
      run: |
        ./gradlew jar
        ./gradlew sourcesJar
        ./gradlew javadocJar
        
    - name: List generated artifacts
      run: |
        echo "Generated JAR files:"
        ls -la build/libs/
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog
        if [[ -n "$PREV_TAG" ]]; then
          CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s" --no-merges | head -20)
        else
          CHANGELOG="Initial release"
        fi
        
        # Save changelog to file
        cat > RELEASE_CHANGELOG.md << EOF
        ## What's Changed
        
        ${CHANGELOG}
        
        ## F.O.R.G.E Features
        
        - ðŸ”¥ Framework Optimized for Resilient, Global Execution
        - ðŸš€ JDK 21 Virtual Threads (High-performance concurrent processing)
        - ðŸ”’ Comprehensive Security Framework
        - ðŸŒ± Spring Boot Integration
        - ðŸ§ª 120+ Tests (93% Coverage)
        - ðŸ“š Complete Documentation
        
        ## Downloads
        
        - **Main JAR**: forge-${{ steps.version.outputs.CLEAN_VERSION }}.jar
        - **Sources JAR**: forge-${{ steps.version.outputs.CLEAN_VERSION }}-sources.jar  
        - **Javadoc JAR**: forge-${{ steps.version.outputs.CLEAN_VERSION }}-javadoc.jar
        
        ## Installation
        
        ### Gradle
        \`\`\`kotlin
        dependencies {
            implementation("com.forge:forge:${{ steps.version.outputs.CLEAN_VERSION }}")
        }
        \`\`\`
        
        ### Maven
        \`\`\`xml
        <dependency>
            <groupId>com.forge</groupId>
            <artifactId>forge</artifactId>
            <version>${{ steps.version.outputs.CLEAN_VERSION }}</version>
        </dependency>
        \`\`\`
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: FORGE ${{ steps.version.outputs.VERSION }}
        body_path: RELEASE_CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
        files: |
          build/libs/*.jar
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload to GitHub Packages
      run: |
        ./gradlew publish
      env:
        USERNAME: ${{ github.actor }}
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Summary
      run: |
        echo "## ðŸŽ‰ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "**Release URL**: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
        echo "- Main JAR: \`forge-${{ steps.version.outputs.CLEAN_VERSION }}.jar\`" >> $GITHUB_STEP_SUMMARY
        echo "- Sources JAR: \`forge-${{ steps.version.outputs.CLEAN_VERSION }}-sources.jar\`" >> $GITHUB_STEP_SUMMARY
        echo "- Javadoc JAR: \`forge-${{ steps.version.outputs.CLEAN_VERSION }}-javadoc.jar\`" >> $GITHUB_STEP_SUMMARY